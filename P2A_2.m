%% Robot Autonomy Project 2A
% 2. Stereo Camera Calibration

clc;
clear all;
close all;

% %% Camera calibration with 50 randomly chosen calibration images
% r=randi(3473,50,1);
% for i=1:size(r)
%     frameList{i}=fullfile(pwd,'cmu_16662_camera_calibration',sprintf('rawleft%04d.jpg',r(i)));
% end
% 
% % Detect the checkerboard pattern
% [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(frameList);
% frameList = frameList(imagesUsed);
% 
% % Calculate the corners of the squares
% squareSize=0.1523;
% worldPoints = generateCheckerboardPoints(boardSize, squareSize);
% 
% % Estimate the camera parameters
% cameraParams = estimateCameraParameters(imagePoints, worldPoints);
% 
% % Intrinsic parameter matrix
% cameraParams.IntrinsicMatrix
% 
% % Radial Distorsion parameters
% cameraParams.RadialDistortion
% 
% % Reprojection errors
% cameraParams.MeanReprojectionError
% 
% % Bar graph of reprojection errors
% figure;
% showReprojectionErrors(cameraParams);
% 
% % Scatter plot of reprojection errors
% figure,
% showReprojectionErrors(cameraParams, 'ScatterPlot');

%% Using matchDetector to find the correspondences between a pair of corresponding images

R = zeros(3,3);
R2 = zeros(3,3);
if matlabpool('size') == 0 % checking to see if my pool is already open
    matlabpool open 2
end

while (R(1,1) + R(2,2) + R(3,3) < 2.9) || (R2(1,1) + R2(2,2) + R2(3,3) < 2.9)


    % Selecting a random pair
    r = randi(3473,1);
    leftimgpath = fullfile(pwd,'cmu_16662_camera_calibration',sprintf('rawleft%04d.jpg',r));
    rightimgpath = fullfile(pwd,'cmu_16662_camera_calibration',sprintf('rawright%04d.jpg',r));

    I1 = rgb2gray(imread(leftimgpath));
    I2 = rgb2gray(imread(rightimgpath));

    % Finding the corners using the Harris corner detector
    points1 = detectHarrisFeatures(I1);
    points2 = detectHarrisFeatures(I2);

    % Extracting the neighborhood features
    [features1, valid_points1] = extractFeatures(I1, points1);
    [features2, valid_points2] = extractFeatures(I2, points2);

    % getting matching points
    indexPairs = matchFeatures(features1, features2);

    % Retrieve the locations of the corresponding points for each image
    matchedPoints1 = valid_points1(indexPairs(:, 1), :);
    matchedPoints2 = valid_points2(indexPairs(:, 2), :);

    %% Visualiziing the matching points
    % figure; showMatchedFeatures(I1, I2, matchedPoints1, matchedPoints2);

    %% Sending points to 8 point algorithm to estimate the Fundamental Matrix
    S = size(matchedPoints1,1);
    pts1 = [];
    pts2 = [];
    temp1 = [];
    temp2 = [];

    for i = 1:S
       temp1 = [round(matchedPoints1(i).Location)]';
       pts1 = [pts1 temp1];
       temp2 = [round(matchedPoints2(i).Location)]';
       pts2 = [pts2 temp2];
    end

    pts1(3,:) = 1;
    pts2(3,:) = 1;

    normalization_constant = max([max(size(I1)) max(size(I2))]);
    [ F ] = eightpoint_norm( pts1, pts2, normalization_constant )

    % to display epipolar lines
    %displayEpipolarF(I1, I2, F);


    %% Result generated by Stereo Camera calibration toolbox over 20 images 
    % Provided by Yuhan

    CP = load('cameraParameter.mat');
    % Can access various matrices and information related to the stereo camera from here! 

    load('cameraparams.mat');

    K = cameraParams.IntrinsicMatrix'
    E = K'*F*K
    [U S V] = svd(E);
    S
    W = [ 0 -1 0; 1 0 0; 0 0 1];

    tx = V'*W*S*V
    t = [tx(3,2);tx(1,3);tx(2,1)] %hat op
    R = U*inv(W)*V
    
    tx2 = V'*inv(W)*S*V
    t2 = [tx2(3,2);tx2(1,3);tx2(2,1)] %hat op
    R2 = U*W*V

end

    % closing parallel pool
matlabpool close;






